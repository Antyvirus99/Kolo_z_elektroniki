
ROBOT2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000052a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800104  00800104  000005c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000065b  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000296  00000000  00000000  00000d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  00000fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038d  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000252  00000000  00000000  000019a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00001bf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	05 c1       	rjmp	.+522    	; 0x212 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	8e c0       	rjmp	.+284    	; 0x128 <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	73 c1       	rjmp	.+742    	; 0x302 <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	36 c0       	rjmp	.+108    	; 0x8e <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	4c c0       	rjmp	.+152    	; 0xbe <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e2       	ldi	r30, 0x2A	; 42
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a4 e0       	ldi	r26, 0x04	; 4
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 33       	cpi	r26, 0x30	; 48
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	85 d1       	rcall	.+778    	; 0x372 <main>
  68:	5e c2       	rjmp	.+1212   	; 0x526 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <usart_inicjuj>:
		#define BAUD 9600        //tutaj podaj ¿¹dan¹ prêdkoœæ transmisji
		#include <util/setbaud.h> //linkowanie tego pliku musi byæ
		//po zdefiniowaniu BAUD
		
		//ustaw obliczone przez makro wartoœci
		UBRR0H = UBRRH_VALUE;
  6c:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = UBRRL_VALUE;
  70:	83 e3       	ldi	r24, 0x33	; 51
  72:	80 93 c4 00 	sts	0x00C4, r24
		#if USE_2X
		UCSR0A |=  (1<<U2X0);
		#else
		UCSR0A &= ~(1<<U2X0);
  76:	e0 ec       	ldi	r30, 0xC0	; 192
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	8d 7f       	andi	r24, 0xFD	; 253
  7e:	80 83       	st	Z, r24
		
		//Ustawiamy pozosta³e parametry modu³ USART
		//U W A G A !!!
		//W ATmega8, aby zapisaæ do rejestru UCSRC nale¿y ustawiaæ bit URSEL
		//zobacz tak¿e: http://mikrokontrolery.blogspot.com/2011/04/avr-czyhajace-pulapki.html#avr_pulapka_2
		UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);  //bitów danych: 8
  80:	86 e0       	ldi	r24, 0x06	; 6
  82:	80 93 c2 00 	sts	0x00C2, r24
		//bity stopu:  1
		//parzystoœæ:  brak
		//w³¹cz nadajnik i odbiornik oraz ich przerwania odbiornika
		//przerwania nadajnika w³¹czamy w funkcji wyslij_wynik()
		UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0);
  86:	88 e9       	ldi	r24, 0x98	; 152
  88:	80 93 c1 00 	sts	0x00C1, r24
  8c:	08 95       	ret

0000008e <__vector_16>:

volatile unsigned char ignoruj_dane;


ISR (TIMER0_OVF_vect)
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
	
	static unsigned char x = 0;
	
	x ++;
  9a:	80 91 18 01 	lds	r24, 0x0118
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 18 01 	sts	0x0118, r24
	if (x >= (F_CPU / 1024 /256))
  a4:	8e 31       	cpi	r24, 0x1E	; 30
  a6:	28 f0       	brcs	.+10     	; 0xb2 <__vector_16+0x24>
	{
		//funkcja przerwania timera0 KILKA razy na s
	
		wyslij_ramke = 1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 19 01 	sts	0x0119, r24
		x=0;
  ae:	10 92 18 01 	sts	0x0118, r1
		//ramka_nadawcza[1] ^= (1<<3);
		//ramka_nadawcza[1] ++;
	
	}
}
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <__vector_18>:

ISR (USART_RX_vect) //funkcja przerwania odbioru danych (jednego bajt) usart 
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	static unsigned int index = 0;
	
	
	
	if (ignoruj_dane)
  cc:	80 91 2f 01 	lds	r24, 0x012F
  d0:	88 23       	and	r24, r24
  d2:	21 f0       	breq	.+8      	; 0xdc <__vector_18+0x1e>
	{
		TCNT0 = UDR0;
  d4:	80 91 c6 00 	lds	r24, 0x00C6
  d8:	86 bd       	out	0x26, r24	; 38
  da:	1f c0       	rjmp	.+62     	; 0x11a <__vector_18+0x5c>
		
	} 
	else
	{
		//rozkaz = UDR0;
		if (index == 0)
  dc:	80 91 16 01 	lds	r24, 0x0116
  e0:	90 91 17 01 	lds	r25, 0x0117
  e4:	89 2b       	or	r24, r25
  e6:	71 f4       	brne	.+28     	; 0x104 <__vector_18+0x46>
		{
			nastawa[0] = UDR0;
  e8:	80 91 c6 00 	lds	r24, 0x00C6
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 01 01 	sts	0x0101, r25
  f2:	80 93 00 01 	sts	0x0100, r24
			index ++;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 17 01 	sts	0x0117, r25
  fe:	80 93 16 01 	sts	0x0116, r24
 102:	0b c0       	rjmp	.+22     	; 0x11a <__vector_18+0x5c>
		}
		else
		{
			nastawa[1] = UDR0;
 104:	80 91 c6 00 	lds	r24, 0x00C6
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 03 01 	sts	0x0103, r25
 10e:	80 93 02 01 	sts	0x0102, r24
			index = 0;
 112:	10 92 17 01 	sts	0x0117, r1
 116:	10 92 16 01 	sts	0x0116, r1
	index ++;
	if (index >= 2) index = 0;
	*/
	//PORTD ^= (1<<PD7);
	
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_5>:

ISR (PCINT2_vect) //przerwanie na zboczu prawe
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
	static unsigned char licznik_przerwan = 0;
	static unsigned long wynik_poprzedni;
	static unsigned long wynik_nastepny;
	
	
	if (PIND & (1<<PD2))
 142:	4a 9b       	sbis	0x09, 2	; 9
 144:	59 c0       	rjmp	.+178    	; 0x1f8 <__vector_5+0xd0>
	{
		
		if (licznik_przerwan == 0)
 146:	80 91 15 01 	lds	r24, 0x0115
 14a:	81 11       	cpse	r24, r1
 14c:	1a c0       	rjmp	.+52     	; 0x182 <__vector_5+0x5a>
		{
			wynik_poprzedni = TCNT1;
 14e:	80 91 84 00 	lds	r24, 0x0084
 152:	90 91 85 00 	lds	r25, 0x0085
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	80 93 11 01 	sts	0x0111, r24
 15e:	90 93 12 01 	sts	0x0112, r25
 162:	a0 93 13 01 	sts	0x0113, r26
 166:	b0 93 14 01 	sts	0x0114, r27
			licznik_przerwan =1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 15 01 	sts	0x0115, r24
			timer1_licznik_przepelnien_prawy_enkoder = 0;
 170:	10 92 26 01 	sts	0x0126, r1
 174:	10 92 27 01 	sts	0x0127, r1
 178:	10 92 28 01 	sts	0x0128, r1
 17c:	10 92 29 01 	sts	0x0129, r1
 180:	3b c0       	rjmp	.+118    	; 0x1f8 <__vector_5+0xd0>
			
		}
		else
		{
			wynik_nastepny = TCNT1;
 182:	80 91 84 00 	lds	r24, 0x0084
 186:	90 91 85 00 	lds	r25, 0x0085
 18a:	a0 e0       	ldi	r26, 0x00	; 0
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	80 93 0d 01 	sts	0x010D, r24
 192:	90 93 0e 01 	sts	0x010E, r25
 196:	a0 93 0f 01 	sts	0x010F, r26
 19a:	b0 93 10 01 	sts	0x0110, r27

		
			wynik_prawy_enkoder = timer1_licznik_przepelnien_prawy_enkoder * 65536 + wynik_nastepny - wynik_poprzedni;
 19e:	40 91 26 01 	lds	r20, 0x0126
 1a2:	50 91 27 01 	lds	r21, 0x0127
 1a6:	60 91 28 01 	lds	r22, 0x0128
 1aa:	70 91 29 01 	lds	r23, 0x0129
 1ae:	ba 01       	movw	r22, r20
 1b0:	55 27       	eor	r21, r21
 1b2:	44 27       	eor	r20, r20
 1b4:	84 0f       	add	r24, r20
 1b6:	95 1f       	adc	r25, r21
 1b8:	a6 1f       	adc	r26, r22
 1ba:	b7 1f       	adc	r27, r23
 1bc:	40 91 11 01 	lds	r20, 0x0111
 1c0:	50 91 12 01 	lds	r21, 0x0112
 1c4:	60 91 13 01 	lds	r22, 0x0113
 1c8:	70 91 14 01 	lds	r23, 0x0114
 1cc:	84 1b       	sub	r24, r20
 1ce:	95 0b       	sbc	r25, r21
 1d0:	a6 0b       	sbc	r26, r22
 1d2:	b7 0b       	sbc	r27, r23
 1d4:	80 93 1a 01 	sts	0x011A, r24
 1d8:	90 93 1b 01 	sts	0x011B, r25
 1dc:	a0 93 1c 01 	sts	0x011C, r26
 1e0:	b0 93 1d 01 	sts	0x011D, r27
			//wynik_prawy_enkoder =54321;
			//przygotuj timer do ponownego pomiaru
		
			timer1_licznik_przepelnien_prawy_enkoder =0;
 1e4:	10 92 26 01 	sts	0x0126, r1
 1e8:	10 92 27 01 	sts	0x0127, r1
 1ec:	10 92 28 01 	sts	0x0128, r1
 1f0:	10 92 29 01 	sts	0x0129, r1
			licznik_przerwan = 0;
 1f4:	10 92 15 01 	sts	0x0115, r1
			
		
		}

	}
}
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_3>:

ISR (PCINT0_vect) //przerwanie na zboczu lewe
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
	static unsigned char licznik_przerwan = 0;
	static unsigned long wynik_poprzedni;
	static unsigned long wynik_nastepny;
	
	
	if (PINB & (1<<PB0))
 22c:	18 9b       	sbis	0x03, 0	; 3
 22e:	5c c0       	rjmp	.+184    	; 0x2e8 <__vector_3+0xd6>
	{
		
		if (licznik_przerwan == 0)
 230:	80 91 0c 01 	lds	r24, 0x010C
 234:	81 11       	cpse	r24, r1
 236:	1a c0       	rjmp	.+52     	; 0x26c <__vector_3+0x5a>
		{
			wynik_poprzedni = TCNT1;
 238:	80 91 84 00 	lds	r24, 0x0084
 23c:	90 91 85 00 	lds	r25, 0x0085
 240:	a0 e0       	ldi	r26, 0x00	; 0
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	80 93 08 01 	sts	0x0108, r24
 248:	90 93 09 01 	sts	0x0109, r25
 24c:	a0 93 0a 01 	sts	0x010A, r26
 250:	b0 93 0b 01 	sts	0x010B, r27
			licznik_przerwan =1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 0c 01 	sts	0x010C, r24
			timer1_licznik_przepelnien_lewy_enkoder = 0;
 25a:	10 92 22 01 	sts	0x0122, r1
 25e:	10 92 23 01 	sts	0x0123, r1
 262:	10 92 24 01 	sts	0x0124, r1
 266:	10 92 25 01 	sts	0x0125, r1
 26a:	3e c0       	rjmp	.+124    	; 0x2e8 <__vector_3+0xd6>

		}
		else
		{
			wynik_nastepny = TCNT1;
 26c:	80 91 84 00 	lds	r24, 0x0084
 270:	90 91 85 00 	lds	r25, 0x0085
 274:	a0 e0       	ldi	r26, 0x00	; 0
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	80 93 04 01 	sts	0x0104, r24
 27c:	90 93 05 01 	sts	0x0105, r25
 280:	a0 93 06 01 	sts	0x0106, r26
 284:	b0 93 07 01 	sts	0x0107, r27

			
			wynik_lewy_enkoder = timer1_licznik_przepelnien_lewy_enkoder * 65536 + wynik_nastepny - wynik_poprzedni;
 288:	40 91 22 01 	lds	r20, 0x0122
 28c:	50 91 23 01 	lds	r21, 0x0123
 290:	60 91 24 01 	lds	r22, 0x0124
 294:	70 91 25 01 	lds	r23, 0x0125
 298:	ba 01       	movw	r22, r20
 29a:	55 27       	eor	r21, r21
 29c:	44 27       	eor	r20, r20
 29e:	84 0f       	add	r24, r20
 2a0:	95 1f       	adc	r25, r21
 2a2:	a6 1f       	adc	r26, r22
 2a4:	b7 1f       	adc	r27, r23
 2a6:	40 91 08 01 	lds	r20, 0x0108
 2aa:	50 91 09 01 	lds	r21, 0x0109
 2ae:	60 91 0a 01 	lds	r22, 0x010A
 2b2:	70 91 0b 01 	lds	r23, 0x010B
 2b6:	84 1b       	sub	r24, r20
 2b8:	95 0b       	sbc	r25, r21
 2ba:	a6 0b       	sbc	r26, r22
 2bc:	b7 0b       	sbc	r27, r23
 2be:	80 93 1e 01 	sts	0x011E, r24
 2c2:	90 93 1f 01 	sts	0x011F, r25
 2c6:	a0 93 20 01 	sts	0x0120, r26
 2ca:	b0 93 21 01 	sts	0x0121, r27
			
			//przygotuj timer do ponownego pomiaru
			
			timer1_licznik_przepelnien_lewy_enkoder =0;
 2ce:	10 92 22 01 	sts	0x0122, r1
 2d2:	10 92 23 01 	sts	0x0123, r1
 2d6:	10 92 24 01 	sts	0x0124, r1
 2da:	10 92 25 01 	sts	0x0125, r1
			licznik_przerwan = 0;
 2de:	10 92 0c 01 	sts	0x010C, r1
			PORTD ^= (1<<PD7);
 2e2:	8b b1       	in	r24, 0x0b	; 11
 2e4:	80 58       	subi	r24, 0x80	; 128
 2e6:	8b b9       	out	0x0b, r24	; 11
			
		}

	}
}
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__vector_13>:


ISR (TIMER1_OVF_vect) 
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
	UDR0 = SUWAK_SRODEK;
	while (!(UCSR0A & (1<<UDRE0))); //zaczekaj jesli cos jest nadawane
	UDR0 = PRAWY_WSTECZ_OCR;
	*/
	
	timer1_licznik_przepelnien_prawy_enkoder ++;
 314:	80 91 26 01 	lds	r24, 0x0126
 318:	90 91 27 01 	lds	r25, 0x0127
 31c:	a0 91 28 01 	lds	r26, 0x0128
 320:	b0 91 29 01 	lds	r27, 0x0129
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	a1 1d       	adc	r26, r1
 328:	b1 1d       	adc	r27, r1
 32a:	80 93 26 01 	sts	0x0126, r24
 32e:	90 93 27 01 	sts	0x0127, r25
 332:	a0 93 28 01 	sts	0x0128, r26
 336:	b0 93 29 01 	sts	0x0129, r27
	timer1_licznik_przepelnien_lewy_enkoder ++;
 33a:	80 91 22 01 	lds	r24, 0x0122
 33e:	90 91 23 01 	lds	r25, 0x0123
 342:	a0 91 24 01 	lds	r26, 0x0124
 346:	b0 91 25 01 	lds	r27, 0x0125
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	a1 1d       	adc	r26, r1
 34e:	b1 1d       	adc	r27, r1
 350:	80 93 22 01 	sts	0x0122, r24
 354:	90 93 23 01 	sts	0x0123, r25
 358:	a0 93 24 01 	sts	0x0124, r26
 35c:	b0 93 25 01 	sts	0x0125, r27
}
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <main>:
	unsigned long temp_prawy;
	unsigned long temp_lewy;
	
	signed int wartosc_OCR_prawy;
	signed int wartosc_OCR_lewy;
	silniki_inicjuj();
 372:	96 d0       	rcall	.+300    	; 0x4a0 <silniki_inicjuj>
	
	ignoruj_dane = 1;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 2f 01 	sts	0x012F, r24
	usart_inicjuj();
 37a:	78 de       	rcall	.-784    	; 0x6c <usart_inicjuj>
	
	sei();
 37c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	2f ef       	ldi	r18, 0xFF	; 255
 380:	83 ed       	ldi	r24, 0xD3	; 211
 382:	90 e3       	ldi	r25, 0x30	; 48
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0x12>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x1c>
 38e:	00 00       	nop
	_delay_ms(2000);
	ignoruj_dane = 0;
 390:	10 92 2f 01 	sts	0x012F, r1
	
	
	//w³acz zasilanie HC05
	DDRD |= (1<<PD4);
 394:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &=~ (1<<PD4);
 396:	5c 98       	cbi	0x0b, 4	; 11
	
	//Program zadeklarowany jest dla ATmega8, a pracujesz na ATmega48  :-)
	//Po zmianie zapewne bedziesz musia³ poprawiæ funkcje USART itp bo rejestry s¹ inne.
	
	
	DDRD	|=	(1<<PD7);	//LED
 398:	57 9a       	sbi	0x0a, 7	; 10
	DDRB	|= (1<<PB2) | (1<<PB1); 
 39a:	84 b1       	in	r24, 0x04	; 4
 39c:	86 60       	ori	r24, 0x06	; 6
 39e:	84 b9       	out	0x04, r24	; 4
	
	//Preskaler timer  1
	TCCR1B |= (1<<CS12);
 3a0:	e1 e8       	ldi	r30, 0x81	; 129
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	84 60       	ori	r24, 0x04	; 4
 3a8:	80 83       	st	Z, r24
	
	//Przerwanie na PCINT0
	PCMSK0 |= (1<<PCINT0);
 3aa:	eb e6       	ldi	r30, 0x6B	; 107
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);
 3b4:	e8 e6       	ldi	r30, 0x68	; 104
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	81 60       	ori	r24, 0x01	; 1
 3bc:	80 83       	st	Z, r24
	
	
	//Przerwanie na PCINT18
	PCMSK2 |= (1<<PCINT18);
 3be:	ad e6       	ldi	r26, 0x6D	; 109
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	8c 91       	ld	r24, X
 3c4:	84 60       	ori	r24, 0x04	; 4
 3c6:	8c 93       	st	X, r24
	PCICR |= (1<<PCIE2);
 3c8:	80 81       	ld	r24, Z
 3ca:	84 60       	ori	r24, 0x04	; 4
 3cc:	80 83       	st	Z, r24
	
	
	DDRC |= (1<< PC1);
 3ce:	39 9a       	sbi	0x07, 1	; 7
	PORTC &=~ (1<<PC1);
 3d0:	41 98       	cbi	0x08, 1	; 8
	
	
	PRAWY_NAPRZOD_OCR = 50;
 3d2:	82 e3       	ldi	r24, 0x32	; 50
 3d4:	88 bd       	out	0x28, r24	; 40
	LEWY_NAPRZOD_OCR =50;
 3d6:	80 93 b4 00 	sts	0x00B4, r24
	silnik1_naprzod();
 3da:	83 d0       	rcall	.+262    	; 0x4e2 <silnik1_naprzod>
	silnik2_naprzod();
 3dc:	92 d0       	rcall	.+292    	; 0x502 <silnik2_naprzod>
		{
			if (PRAWY_NAPRZOD_OCR >= 1)PRAWY_NAPRZOD_OCR = PRAWY_NAPRZOD_OCR - 1;
		}
		if (temp_lewy>900)
		{
			if (LEWY_NAPRZOD_OCR <= 254)LEWY_NAPRZOD_OCR = LEWY_NAPRZOD_OCR + 1;
 3de:	c4 eb       	ldi	r28, 0xB4	; 180
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		
		//przeysyl prawego enkodera
		//temp_prawy = 54321;
		while (!(UCSR0A & (1<<UDRE0)));//zaczekaj na wolny bufor nadawania
 3e2:	e0 ec       	ldi	r30, 0xC0	; 192
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0	=  (unsigned char) temp_prawy;
 3e6:	a6 ec       	ldi	r26, 0xC6	; 198
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
					
				}
		}
		*/
		
		cli();
 3ea:	f8 94       	cli
		temp_prawy = wynik_prawy_enkoder;
 3ec:	00 91 1a 01 	lds	r16, 0x011A
 3f0:	10 91 1b 01 	lds	r17, 0x011B
 3f4:	20 91 1c 01 	lds	r18, 0x011C
 3f8:	30 91 1d 01 	lds	r19, 0x011D
		temp_lewy = wynik_lewy_enkoder;
 3fc:	40 91 1e 01 	lds	r20, 0x011E
 400:	50 91 1f 01 	lds	r21, 0x011F
 404:	60 91 20 01 	lds	r22, 0x0120
 408:	70 91 21 01 	lds	r23, 0x0121
		sei();
 40c:	78 94       	sei
		
		
		if (temp_prawy>900)
 40e:	05 38       	cpi	r16, 0x85	; 133
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	18 07       	cpc	r17, r24
 414:	21 05       	cpc	r18, r1
 416:	31 05       	cpc	r19, r1
 418:	30 f0       	brcs	.+12     	; 0x426 <main+0xb4>
		{
			if (PRAWY_NAPRZOD_OCR <= 254) PRAWY_NAPRZOD_OCR = PRAWY_NAPRZOD_OCR + 1;			
 41a:	88 b5       	in	r24, 0x28	; 40
 41c:	8f 3f       	cpi	r24, 0xFF	; 255
 41e:	19 f0       	breq	.+6      	; 0x426 <main+0xb4>
 420:	88 b5       	in	r24, 0x28	; 40
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	88 bd       	out	0x28, r24	; 40
		}
		if (temp_prawy<900)
 426:	04 38       	cpi	r16, 0x84	; 132
 428:	93 e0       	ldi	r25, 0x03	; 3
 42a:	19 07       	cpc	r17, r25
 42c:	21 05       	cpc	r18, r1
 42e:	31 05       	cpc	r19, r1
 430:	30 f4       	brcc	.+12     	; 0x43e <main+0xcc>
		{
			if (PRAWY_NAPRZOD_OCR >= 1)PRAWY_NAPRZOD_OCR = PRAWY_NAPRZOD_OCR - 1;
 432:	88 b5       	in	r24, 0x28	; 40
 434:	88 23       	and	r24, r24
 436:	19 f0       	breq	.+6      	; 0x43e <main+0xcc>
 438:	88 b5       	in	r24, 0x28	; 40
 43a:	81 50       	subi	r24, 0x01	; 1
 43c:	88 bd       	out	0x28, r24	; 40
		}
		if (temp_lewy>900)
 43e:	45 38       	cpi	r20, 0x85	; 133
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	58 07       	cpc	r21, r24
 444:	61 05       	cpc	r22, r1
 446:	71 05       	cpc	r23, r1
 448:	30 f0       	brcs	.+12     	; 0x456 <main+0xe4>
		{
			if (LEWY_NAPRZOD_OCR <= 254)LEWY_NAPRZOD_OCR = LEWY_NAPRZOD_OCR + 1;
 44a:	88 81       	ld	r24, Y
 44c:	8f 3f       	cpi	r24, 0xFF	; 255
 44e:	19 f0       	breq	.+6      	; 0x456 <main+0xe4>
 450:	88 81       	ld	r24, Y
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	88 83       	st	Y, r24
		}
		if (temp_lewy<900)
 456:	44 38       	cpi	r20, 0x84	; 132
 458:	93 e0       	ldi	r25, 0x03	; 3
 45a:	59 07       	cpc	r21, r25
 45c:	61 05       	cpc	r22, r1
 45e:	71 05       	cpc	r23, r1
 460:	30 f4       	brcc	.+12     	; 0x46e <main+0xfc>
		{
			if (LEWY_NAPRZOD_OCR >= 1)LEWY_NAPRZOD_OCR = LEWY_NAPRZOD_OCR - 1;
 462:	88 81       	ld	r24, Y
 464:	88 23       	and	r24, r24
 466:	19 f0       	breq	.+6      	; 0x46e <main+0xfc>
 468:	88 81       	ld	r24, Y
 46a:	81 50       	subi	r24, 0x01	; 1
 46c:	88 83       	st	Y, r24
		
		
		
		//przeysyl prawego enkodera
		//temp_prawy = 54321;
		while (!(UCSR0A & (1<<UDRE0)));//zaczekaj na wolny bufor nadawania
 46e:	80 81       	ld	r24, Z
 470:	85 ff       	sbrs	r24, 5
 472:	fd cf       	rjmp	.-6      	; 0x46e <main+0xfc>
		UDR0	=  (unsigned char) temp_prawy;
 474:	0c 93       	st	X, r16
		temp_prawy >>= 8;
 476:	01 2f       	mov	r16, r17
 478:	12 2f       	mov	r17, r18
 47a:	23 2f       	mov	r18, r19
 47c:	33 27       	eor	r19, r19
		
		while (!(UCSR0A & (1<<UDRE0)));//zaczekaj na wolny bufor nadawania
 47e:	80 81       	ld	r24, Z
 480:	85 ff       	sbrs	r24, 5
 482:	fd cf       	rjmp	.-6      	; 0x47e <main+0x10c>
		UDR0	=  (unsigned char) temp_prawy;
 484:	0c 93       	st	X, r16
		
		
		//przesyl lewego enkodera
		//temp_lewy = 12345;
		while (!(UCSR0A & (1<<UDRE0)));//zaczekaj na wolny bufor nadawania
 486:	80 81       	ld	r24, Z
 488:	85 ff       	sbrs	r24, 5
 48a:	fd cf       	rjmp	.-6      	; 0x486 <main+0x114>
		UDR0	=  (unsigned char) temp_lewy;
 48c:	4c 93       	st	X, r20
		temp_lewy >>= 8;		 
 48e:	45 2f       	mov	r20, r21
 490:	56 2f       	mov	r21, r22
 492:	67 2f       	mov	r22, r23
 494:	77 27       	eor	r23, r23
			
		while (!(UCSR0A & (1<<UDRE0)));//zaczekaj na wolny bufor nadawania
 496:	80 81       	ld	r24, Z
 498:	85 ff       	sbrs	r24, 5
 49a:	fd cf       	rjmp	.-6      	; 0x496 <main+0x124>
		UDR0	=  (unsigned char) temp_lewy;
 49c:	4c 93       	st	X, r20
		}
		*/
		/*UDR0 = 0xaa;
		_delay_ms(1000);*/
		
	}
 49e:	a5 cf       	rjmp	.-182    	; 0x3ea <main+0x78>

000004a0 <silniki_inicjuj>:


void silniki_inicjuj (void)
{
//ustawienie pinow na wyjscie do sterowania mostkami
	PRAWY_K1_D_PWM_DDRx		|=  (1 << PRAWY_K1_D_PWM_PINx);
 4a0:	56 9a       	sbi	0x0a, 6	; 10
	PRAWY_K1_D_PWM_PORTx	&=~ (1 << PRAWY_K1_D_PWM_PINx);
 4a2:	5e 98       	cbi	0x0b, 6	; 11
	
	PRAWY_K2_D_PWM_DDRx		|=  (1 << PRAWY_K2_D_PWM_PINx);
 4a4:	55 9a       	sbi	0x0a, 5	; 10
	PRAWY_K2_D_PWM_PORTx	&=~ (1 << PRAWY_K2_D_PWM_PINx);
 4a6:	5d 98       	cbi	0x0b, 5	; 11

	LEWY_K1_D_PWM_DDRx		|=  (1 << LEWY_K1_D_PWM_PINx);
 4a8:	23 9a       	sbi	0x04, 3	; 4
	LEWY_K1_D_PWM_PORTx		&=~ (1 << LEWY_K1_D_PWM_PINx);
 4aa:	2b 98       	cbi	0x05, 3	; 5
	
	LEWY_K2_D_PWM_DDRx		|=  (1 << LEWY_K2_D_PWM_PINx);
 4ac:	53 9a       	sbi	0x0a, 3	; 10
	LEWY_K2_D_PWM_PORTx		&=~ (1 << LEWY_K2_D_PWM_PINx);
 4ae:	5b 98       	cbi	0x0b, 3	; 11
	
	PRAWY_K1_G_DDRx			|= (1 << PRAWY_K1_G_PINx);
 4b0:	38 9a       	sbi	0x07, 0	; 7
	PRAWY_K1_G_PORTx		|= (1 << PRAWY_K1_G_PINx);
 4b2:	40 9a       	sbi	0x08, 0	; 8
	
	PRAWY_K2_G_DDRx			|= (1 << PRAWY_K2_G_PINx);
 4b4:	39 9a       	sbi	0x07, 1	; 7
	PRAWY_K2_G_PORTx		|= (1 << PRAWY_K2_G_PINx);
 4b6:	41 9a       	sbi	0x08, 1	; 8
	
	LEWY_K1_G_DDRx			|= (1 << LEWY_K1_G_PINx);
 4b8:	3a 9a       	sbi	0x07, 2	; 7
	LEWY_K1_G_PORTx			|= (1 << LEWY_K1_G_PINx);
 4ba:	42 9a       	sbi	0x08, 2	; 8
	
	LEWY_K2_G_DDRx			|= (1 << LEWY_K2_G_PINx);
 4bc:	3b 9a       	sbi	0x07, 3	; 7
	LEWY_K2_G_PORTx			|= (1 << LEWY_K2_G_PINx);
 4be:	43 9a       	sbi	0x08, 3	; 8
	
	//timer 0 obsluguje PWM silnika 1
	TCCR0A |= (1<<WGM01) | (1<< WGM00); //Fast PWM TOP= 0xFF
 4c0:	84 b5       	in	r24, 0x24	; 36
 4c2:	83 60       	ori	r24, 0x03	; 3
 4c4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00); //preskaler 1
 4c6:	85 b5       	in	r24, 0x25	; 37
 4c8:	81 60       	ori	r24, 0x01	; 1
 4ca:	85 bd       	out	0x25, r24	; 37
	
	//timer 2 obsluguje PWM silnika 2
	TCCR2A |= (1<<WGM21) | (1<< WGM20); //Fast PWM TOP= 0xFF
 4cc:	e0 eb       	ldi	r30, 0xB0	; 176
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	83 60       	ori	r24, 0x03	; 3
 4d4:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20); //preskaler 8
 4d6:	e1 eb       	ldi	r30, 0xB1	; 177
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	81 60       	ori	r24, 0x01	; 1
 4de:	80 83       	st	Z, r24
 4e0:	08 95       	ret

000004e2 <silnik1_naprzod>:


void silnik1_naprzod (void)
{
	//wylacz pwm OC0A
	PRAWY_K1_D_PWM_PORTx &=~ (1 << PRAWY_K1_D_PWM_PINx);//na wszelki wypadek wyzerowanie pinu
 4e2:	5e 98       	cbi	0x0b, 6	; 11
	TCCR0A &=~ ( 1 << COM0A1); //Odlacz pin OC0A od timera 0
 4e4:	84 b5       	in	r24, 0x24	; 36
 4e6:	8f 77       	andi	r24, 0x7F	; 127
 4e8:	84 bd       	out	0x24, r24	; 36
	
	//Wylacz tranzystor gorny
	PRAWY_K2_G_PORTx	 |= (1 << PRAWY_K2_G_PINx);
 4ea:	41 9a       	sbi	0x08, 1	; 8
 4ec:	8f e0       	ldi	r24, 0x0F	; 15
 4ee:	97 e2       	ldi	r25, 0x27	; 39
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <silnik1_naprzod+0xe>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <silnik1_naprzod+0x14>
 4f6:	00 00       	nop
	
	_delay_ms(5);
	
	TCCR0A			 |= ( 1 << COM0B1); //Wlacz PWM na pinie OC0B
 4f8:	84 b5       	in	r24, 0x24	; 36
 4fa:	80 62       	ori	r24, 0x20	; 32
 4fc:	84 bd       	out	0x24, r24	; 36
	PRAWY_K1_G_PORTx	 &=~ (1 << PRAWY_K1_G_PINx);//Wlacz tranzystor gorny
 4fe:	40 98       	cbi	0x08, 0	; 8
 500:	08 95       	ret

00000502 <silnik2_naprzod>:
}


void silnik2_naprzod (void)//zmieniany z silnik2 naprzod
{
	LEWY_K1_D_PWM_PORTx &=~ (1 << LEWY_K1_D_PWM_PINx);
 502:	2b 98       	cbi	0x05, 3	; 5
	TCCR2A			 &=~ (1<<COM2A1); //odlacz pin OC2A PB3 od timera 2
 504:	e0 eb       	ldi	r30, 0xB0	; 176
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	8f 77       	andi	r24, 0x7F	; 127
 50c:	80 83       	st	Z, r24
	
	//wylacz tranzystor gorny
	LEWY_K2_G_PORTx	 |= (1 << LEWY_K2_G_PINx);
 50e:	43 9a       	sbi	0x08, 3	; 8
 510:	8f e0       	ldi	r24, 0x0F	; 15
 512:	97 e2       	ldi	r25, 0x27	; 39
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <silnik2_naprzod+0x12>
 518:	00 c0       	rjmp	.+0      	; 0x51a <silnik2_naprzod+0x18>
 51a:	00 00       	nop
	
	_delay_ms(5);
	
	TCCR2A			 |= (1 << COM2B1); //wlacz PWM na pinie PD3 OC2B
 51c:	80 81       	ld	r24, Z
 51e:	80 62       	ori	r24, 0x20	; 32
 520:	80 83       	st	Z, r24
	LEWY_K1_G_PORTx	 &=~ (1 << LEWY_K1_G_PINx); //wlacz tranzystor gorny
 522:	42 98       	cbi	0x08, 2	; 8
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
